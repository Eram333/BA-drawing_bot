import sys
from PyQt6.QtWidgets import (
    QApplication, QTabWidget
)
from PyQt6.QtCore import  QMimeData
from rotation_matrixes import RotationMatrixWidget



from PyQt6.QtWidgets import (
    QWidget, QHBoxLayout, QVBoxLayout, QFrame, QLabel,
    QGraphicsScene, QGraphicsView, QGraphicsEllipseItem,
    QGraphicsRectItem, QGraphicsPixmapItem, QGraphicsTextItem, QGraphicsLineItem
)
from PyQt6.QtGui import QBrush, QPixmap, QPainter, QDrag, QPen, QColor
from PyQt6.QtCore import Qt
from PyQt6.QtCore import QRectF
from PyQt6.QtCore import Qt, QRectF, QPointF, QMimeData


class DraggableLabel(QLabel):
    def __init__(self, image_path, name):
        super().__init__()
        self.image_path = image_path
        self.name = name
        self.setPixmap(QPixmap(image_path).scaled(60, 60, Qt.AspectRatioMode.KeepAspectRatio))
        self.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.setToolTip(name)

    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton:
            drag = QDrag(self)
            mime = QMimeData()
            mime.setText(f"{self.name}|{self.image_path}")
            drag.setMimeData(mime)
            drag.setPixmap(self.pixmap())
            drag.setHotSpot(event.pos())
            drag.exec()



class DraggableLabel(QLabel):
    def __init__(self, image_path, name):
        super().__init__()
        self.name = name
        self.path = image_path
        self.setPixmap(QPixmap(image_path).scaled(60, 60, Qt.AspectRatioMode.KeepAspectRatio))

    def mouseMoveEvent(self, event):
        drag = QDrag(self)
        mime = QMimeData()
        mime.setText(f"{self.name}|{self.path}")
        drag.setMimeData(mime)
        drag.setPixmap(self.pixmap())
        drag.exec()


class CircuitScene(QGraphicsScene):
    def __init__(self, placeholder_data, background_image=None, parent=None):
        super().__init__(parent)
        self.setSceneRect(0, 0, 800, 500)
        self.placeholders = []

        if background_image:
            self.setBackgroundBrush(QBrush(QPixmap(background_image).scaled(800, 500)))

        for label, pos, expected_name in placeholder_data:
            if "Motor" in label:
                shape = QGraphicsEllipseItem(QRectF(0, 0, 70, 70))
            elif "ESP32" in label:
                shape = QGraphicsRectItem(QRectF(0, 0, 90, 50))
            else:
                shape = QGraphicsRectItem(QRectF(0, 0, 60, 60))

            shape.setBrush(QBrush(QColor(255, 255, 255, 200)))  # Semi-transparent white
            shape.setPen(QPen(QColor("black"), 2))
            shape.setPos(*pos)
            shape.setZValue(1)
            self.addItem(shape)

            text = QGraphicsTextItem(label)
            text.setPos(pos[0], pos[1] + 72)
            text.setZValue(2)
            self.addItem(text)

            self.placeholders.append({
                "label": label,
                "rect": shape,
                "expected": expected_name,
                "content": None
            })

        self.draw_connections()

    def draw_connections(self):
        pen = QPen(Qt.GlobalColor.black, 2)

        coords = {
            "Motor Left": (50, 330),
            "SimpleFOC Mini L": (150, 220),
            "Encoder Left": (150, 330),
            "ESP32": (350, 150),
            "SimpleFOC Mini R": (550, 220),
            "Encoder Right": (550, 330),
            "Motor Right": (650, 330),
        }

        def center(pos):
            return QPointF(pos[0] + 35, pos[1] + 35)

        def draw_path(points):
            for i in range(len(points) - 1):
                line = QGraphicsLineItem(points[i].x(), points[i].y(), points[i + 1].x(), points[i + 1].y())
                line.setPen(pen)
                self.addItem(line)

        def path(*pts):
            return [QPointF(x, y) for x, y in pts]

        # # Left side connections
        # draw_path([
        #     center(coords["Motor Left"]),
        #     QPointF(100, 365),
        #     QPointF(100, 255),
        #     center(coords["SimpleFOC Mini L"])
        # ])
        #
        # draw_path([
        #     center(coords["Encoder Left"]),
        #     QPointF(135, 365),
        #     QPointF(135, 255),
        #     QPointF(150 + 35, 255)
        # ])
        #
        # draw_path([
        #     center(coords["SimpleFOC Mini L"]),
        #     QPointF(200, 220),
        #     QPointF(200, 150),
        #     center(coords["ESP32"])
        # ])
        #
        # # Right side connections
        # draw_path([
        #     center(coords["ESP32"]),
        #     QPointF(500, 150),
        #     QPointF(500, 220),
        #     center(coords["SimpleFOC Mini R"])
        # ])
        #
        # draw_path([
        #     center(coords["SimpleFOC Mini R"]),
        #     QPointF(600, 255),
        #     QPointF(600, 365),
        #     center(coords["Encoder Right"])
        # ])
        #
        # draw_path([
        #     center(coords["SimpleFOC Mini R"]),
        #     QPointF(600, 255),
        #     QPointF(600, 365),
        #     center(coords["Motor Right"])
        # ])

    def dragMoveEvent(self, event):
        event.acceptProposedAction()

    def dropEvent(self, event):
        try:
            name, path = event.mimeData().text().split("|")
        except ValueError:
            return

        for placeholder in self.placeholders:
            rect = placeholder["rect"]
            expected = placeholder["expected"]

            if rect.contains(event.scenePos() - rect.pos()) and placeholder["content"] is None:
                if name != expected:
                    print(f"‚ùå Cannot place {name} in {placeholder['label']} (expected: {expected})")
                    return

                pixmap = QPixmap(path).scaled(50, 50, Qt.AspectRatioMode.KeepAspectRatio)
                item = QGraphicsPixmapItem(pixmap)
                item.setPos(rect.pos().x() + 5, rect.pos().y() + 5)
                item.setZValue(3)
                self.addItem(item)

                placeholder["content"] = item
                rect.setBrush(QBrush(QColor("lightgreen")))
                return


class CircuitTab(QWidget):
    def __init__(self):
        super().__init__()
        layout = QHBoxLayout(self)

        palette_frame = QFrame()
        palette_layout = QVBoxLayout(palette_frame)

        components = [
            (r"C:\Users\Eram Tarek\Desktop\BA\microcontroller.png", "ESP32"),
            (r"C:\Users\Eram Tarek\Desktop\BA\lucky2.png", "SimpleFOC Mini"),
            (r"C:\Users\Eram Tarek\Desktop\BA\motor.png", "BLDC Motor"),
            (r"C:\Users\Eram Tarek\Desktop\BA\encoder.png", "AS5600 Encoder"),
        ]

        for path, name in components:
            label = DraggableLabel(path, name)
            palette_layout.addWidget(label)

        placeholder_data = [
            ("Motor Left", (50, 320), "BLDC Motor"),
            ("Encoder Left", (100, 260), "AS5600 Encoder"),
            ("SimpleFOC Mini L", (150, 200), "SimpleFOC Mini"),
            ("ESP32", (350, 220), "ESP32"),
            ("SimpleFOC Mini R", (550, 200), "SimpleFOC Mini"),
            ("Encoder Right", (600, 260), "AS5600 Encoder"),
            ("Motor Right", (650, 320), "BLDC Motor"),
        ]

        self.scene = CircuitScene(placeholder_data, background_image=r"")
        self.view = QGraphicsView(self.scene)
        self.view.setAcceptDrops(True)
        self.view.setRenderHint(QPainter.RenderHint.Antialiasing)

        layout.addWidget(palette_frame, 1)
        layout.addWidget(self.view, 3)



class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Drawing Bot GUI")
        self.setGeometry(100, 100, 1000, 600)
        layout = QVBoxLayout(self)

        self.tabs = QTabWidget()
        self.tabs.addTab(QWidget(), "Home")
        self.tabs.addTab(CircuitTab(), "Schaltung")
        self.rotation_tab = RotationMatrixWidget()
        self.tabs.insertTab(2, self.rotation_tab, "Rotation matrix")

        self.tabs.addTab(QWidget(), "Monitor")
        self.tabs.addTab(QWidget(), "Settings")

        layout.addWidget(self.tabs)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())


# ----------------------------------------------------------
# components = [
#             (r"C:\users\Eram Tarek\Desktop\BA\microcontroller.png", "ESP32 Microcontroller"),
#             (r"C:\Users\Eram Tarek\Desktop\BA\lucky .png", "SimpleFOC Mini v1.0"),
#             (r"C:\Users\Eram Tarek\Desktop\BA\motor.png", "BLDC Gimbal Motor"),
#             (r"C:\Users\Eram Tarek\Desktop\BA\encoder.png", "AS5600 Encoder"),
#         ]

